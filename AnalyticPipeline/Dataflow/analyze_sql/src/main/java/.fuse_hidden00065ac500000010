/**
 * Created by hungtantran on 5/19/16.
 */
import com.google.cloud.dataflow.sdk.Pipeline;
import com.google.cloud.dataflow.sdk.io.TextIO;
import com.google.cloud.dataflow.sdk.options.Default;
import com.google.cloud.dataflow.sdk.options.Description;
import com.google.cloud.dataflow.sdk.options.PipelineOptions;
import com.google.cloud.dataflow.sdk.options.PipelineOptionsFactory;
import com.google.cloud.dataflow.sdk.transforms.*;
import com.google.cloud.dataflow.sdk.values.KV;
import com.google.cloud.dataflow.sdk.values.PCollection;
import com.google.cloud.dataflow.sdk.values.PCollectionList;

import java.lang.reflect.Array;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.regex.Pattern;
import java.util.regex.Matcher;


public class PriceChangeDetectionFlow {
  public static class MetricValue {
    float value;
    Date date;
  }

  static class ExtractWordsFn extends DoFn<String, KV<String, ArrayList<MetricValue>>> {
    private String extractTableName(String line) {
      String tablename = "";

      int startIndex = line.indexOf("`");
      if (startIndex <= 0) {
        return tablename;
      }

      int endIndex = line.indexOf("`", startIndex + 1);
      if (endIndex <= 0) {
        return tablename;
      }

      tablename = line.substring(startIndex + 1, endIndex);
      return tablename;
    }

    @Override
    public void processElement(ProcessContext c) {
      DateFormat format = new SimpleDateFormat("yyyy-mm-dd");
      String line = c.element();
      String[] parts = line.split(";");
      if (parts.length == 0) {
        return;
      }

      String ticker = parts[0];
      if (ticker.length() == 0) {
        return;
      }

      ArrayList<MetricValue> vals = new ArrayList<MetricValue>();
      for (int i = 1; i < parts.length; ++i) {
        MetricValue value = new MetricValue();
        String[] valParts = parts[i].split(",");
        if (valParts.length != 2) {
          continue;
        }

        try {
          value.date = format.parse(valParts[0]);
          value.value = Float.parseFloat(valParts[1]);
        } catch (Exception e) {
          continue;
        }

        vals.add(value);
      }

      c.output(KV.of(ticker, vals));
    }
  }

  /** A DoFn that converts a Word and Count into a printable string. */
  public static class FormatAsTextFn extends DoFn<KV<String, String>, String> {
    @Override
    public void processElement(ProcessContext c) {
      String[] vals = c.element().getValue().split(";");
      Arrays.sort(vals, 0, vals.length);
      StringBuilder outputStr = new StringBuilder();
      for (String value : vals) {
        if (value.length() > 0) {
          outputStr.append(value + ";");
        }
      }

      c.output(c.element().getKey() + ";" + outputStr.toString());
    }
  }

  public static class ParseLine extends PTransform<PCollection<String>,
      PCollection<KV<String, ArrayList<MetricValue>>>> {
    @Override
    public PCollection<KV<String, ArrayList<MetricValue>>> apply(PCollection<String> lines) {
      PCollection<KV<String, ArrayList<MetricValue>>> parsedLines = lines.apply(
          ParDo.of(new ExtractWordsFn()));

      return parsedLines;
    }
  }

  public class FindSuddenPriceMovement extends PTransform<PCollection<KV<String, ArrayList<MetricValue>>>,
          PCollection<KV<String, String>>> {
    @Override
    public PCollection<KV<String, String>> apply(PCollection<KV<String, String>> lines) {
      PCollection<KV<String, String>> combineLines = lines.apply(Combine.perKey(new CombineLine.MergeString()));
      return combineLines;
    }
  }

  public static interface SqlWordCountOptions extends PipelineOptions {
    @Description("Path of the file to read from")
    @Default.String("/media/hungtantran/HDD1/Users/hungtantran/PycharmProjects/Models/AnalyticPipeline/Dataflow/analyze_sql/src/test/output.txt")
    String getInputFile();
    void setInputFile(String value);

    @Description("Path of the file to write to")
    @Default.String("/media/hungtantran/HDD1/Users/hungtantran/PycharmProjects/Models/AnalyticPipeline/Dataflow/analyze_sql/src/test/price_output.txt")
    String getOutput();
    void setOutput(String value);

    @Description("A comma-seprated list of date string to check")
    String getDateString();
    void setDateString(String dateString);

    @Description("The threshold to consider sudden price movement")
    @Default.Float(1)
    Float getPriceChangePercentageThreshold();
    void setPriceChangePercentageThreshold(Float threshold);
  }

  public static void main(String[] args) {
    SqlWordCountOptions options = PipelineOptionsFactory.fromArgs(args).withValidation()
      .as(SqlWordCountOptions.class);
    String[] dates = options.getDateString().split(",");

    Pipeline p = Pipeline.create(options);
    p.apply(TextIO.Read.named("ReadLines").from(options.getInputFile()))
     .apply(new ParseLine())
     .apply(new FindSuddenPriceMovement(options.getDateString(), options.getPriceChangePercentageThreshold()))
     .apply(ParDo.of(new FormatAsTextFn()))
     .apply(TextIO.Write.named("WriteCounts").to(options.getOutput()));
    p.run();
  }
}
